
==================== FINAL INTERFACE ====================
2016-08-31 18:03:48.390618 UTC

interface main@main:GramLab.Binomial 7103
  interface hash: 4a812a48d5aa8c4537ba6f2d32246343
  ABI hash: ea05f5d161210a3b71c65f850e4fd4a2
  export-list hash: a4a4db5636a9a4ffc505cbf0d38b191e
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ee5365d50ce8cefe44d753474b0d577a
  sig of: Nothing
  used TH splices: False
  where
exports:
  GramLab.Binomial.binomialTest
module dependencies:
package dependencies: QuickCheck-2.8.2@Quick_6TxL5Cx3o2p0HsyT59KWiD
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0 pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL template-haskell-2.10.0.0
                      tf-random-0.5@tfran_1eLmkn3WUnC8NZpPuDLGKF
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.8.2@Quick_6TxL5Cx3o2p0HsyT59KWiD:Test.QuickCheck 7e615a40a74c9052467718d8c88a3cda
import  -/  QuickCheck-2.8.2@Quick_6TxL5Cx3o2p0HsyT59KWiD:Test.QuickCheck.Property 27f3543303e6f2e859a63579ec9ef179
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:Debug.Trace 6660afb6094d69397ea084364da8f950
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Real 1281efa9baf803bc7859d7efb89a38b3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  integer-gmp-1.0.0.0:GHC.Integer.Type 371e90fe753f08ddedf0d2657a9ef5c4
30a61a64d3afd0c7ee34508bebca0158
  $s^1 :: GHC.Types.Double
  {- Strictness: b -}
f156c2ddbe0626c947cde4152d873cda
  $s^2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 0) -}
9605558f037465ea20b00dcc4199baa9
  $w$s^ ::
    GHC.Types.Double -> GHC.Integer.Type.Integer -> GHC.Prim.Double#
  {- Arity: 2, Strictness: <L,U(U)><S,U>, Inline: [0],
     Unfolding: (\ w :: GHC.Types.Double
                   w1 :: GHC.Integer.Type.Integer ->
                 case GHC.Integer.Type.ltInteger#
                        w1
                        GramLab.Binomial.$s^2 of wild { DEFAULT ->
                 case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild1 {
                   GHC.Types.False
                   -> case GHC.Integer.Type.eqInteger#
                             w1
                             GramLab.Binomial.$s^2 of wild2 { DEFAULT ->
                      case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild2 of wild3 {
                        GHC.Types.False
                        -> case w of ww { GHC.Types.D# ww1 -> GramLab.Binomial.$wf ww1 w1 }
                        GHC.Types.True -> 1.0 } }
                   GHC.Types.True
                   -> case GramLab.Binomial.$s^1 ret_ty GHC.Prim.Double# of {} } }) -}
abde6d35fb709dd5078932b155f710c7
  $wbinomialTest ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer -> GHC.Prim.Double#
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0],
     Unfolding: (\ w :: GHC.Integer.Type.Integer
                   w1 :: GHC.Integer.Type.Integer ->
                 case GHC.Integer.Type.gtInteger# w1 w of wild { DEFAULT ->
                 case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild1 {
                   GHC.Types.False
                   -> case GHC.Integer.Type.geInteger#
                             w1
                             (GHC.Integer.Type.divInteger
                                w
                                GramLab.Binomial.binomialTest3) of wild2 { DEFAULT ->
                      case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild2 of wild3 {
                        GHC.Types.False
                        -> case GramLab.Binomial.$wbinomialTestGreater
                                  w
                                  GramLab.Binomial.binomialTest2
                                  (GHC.Integer.Type.minusInteger w w1) of ww { DEFAULT ->
                           let {
                             y1 :: GHC.Prim.Double# = GHC.Prim.+## ww ww
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=## 1.0 y1) of wild4 {
                             GHC.Types.False -> y1 GHC.Types.True -> 1.0 } }
                        GHC.Types.True
                        -> case GramLab.Binomial.$wbinomialTestGreater
                                  w
                                  GramLab.Binomial.binomialTest2
                                  w1 of ww { DEFAULT ->
                           let {
                             y1 :: GHC.Prim.Double# = GHC.Prim.+## ww ww
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=## 1.0 y1) of wild4 {
                             GHC.Types.False -> y1 GHC.Types.True -> 1.0 } } } }
                   GHC.Types.True
                   -> case GramLab.Binomial.binomialTest1
                      ret_ty GHC.Prim.Double#
                      of {} } }) -}
8b3ceec2c869485912d0f7dc895205ff
  $wbinomialTestGreater ::
    GHC.Integer.Type.Integer
    -> GHC.Types.Double -> GHC.Integer.Type.Integer -> GHC.Prim.Double#
  {- Arity: 3, Strictness: <S,U><L,U(U)><S,U>, Inline: [0],
     Unfolding: (\ w :: GHC.Integer.Type.Integer
                   w1 :: GHC.Types.Double
                   w2 :: GHC.Integer.Type.Integer ->
                 GramLab.Binomial.$wgo
                   (Data.OldList.zipWith4
                      @ GHC.Integer.Type.Integer
                      @ GHC.Integer.Type.Integer
                      @ GHC.Types.Double
                      @ GHC.Types.Double
                      @ (GHC.Integer.Type.Integer,
                         GHC.Integer.Type.Integer,
                         GHC.Types.Double,
                         GHC.Types.Double)
                      (GHC.Tuple.(,,,)
                         @ GHC.Integer.Type.Integer
                         @ GHC.Integer.Type.Integer
                         @ GHC.Types.Double
                         @ GHC.Types.Double)
                      (GramLab.Binomial.binomialTest_products1 w w2)
                      (GramLab.Binomial.binomialTest_products2 w w2)
                      (case GramLab.Binomial.binomialTest_$s$wpowers1'
                              (case GramLab.Binomial.$w$s^ w1 w2 of ww { DEFAULT ->
                               GHC.Types.D# ww })
                              (GHC.Types.[] @ GHC.Types.Double)
                              w1
                              w
                              w2 of ww { (#,#) ww1 ww2 ->
                       GHC.List.reverse1
                         @ GHC.Types.Double
                         (GHC.Types.: @ GHC.Types.Double ww1 ww2)
                         (GHC.Types.[] @ GHC.Types.Double) })
                      (GramLab.Binomial.binomialTest_powers2 w1 w w2))
                   0.0) -}
963a6ff0786b0be406887e5c4cb09b8b
  $wf ::
    GHC.Prim.Double# -> GHC.Integer.Type.Integer -> GHC.Prim.Double#
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0] -}
1de2d55b938b55af01200bb33446aeba
  $wgo ::
    [(GHC.Integer.Type.Integer,
      GHC.Integer.Type.Integer,
      GHC.Types.Double,
      GHC.Types.Double)]
    -> GHC.Prim.Double# -> GHC.Prim.Double#
  {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0] -}
d7816cc62184f0bad33d71c40b7c36f5
  $wpowers2 ::
    GHC.Types.Double
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> (# GHC.Types.Double, [GHC.Types.Double] #)
  {- Arity: 3, Strictness: <L,U(U)><S,U><S,U>, Inline: [0] -}
02e6b7482a5127c094107616a51b505a
  $wproducts1 ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> (# GHC.Integer.Type.Integer, [GHC.Integer.Type.Integer] #)
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0] -}
806f0017f5292582dee88ebc5171259e
  $wproducts2 ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> (# GHC.Integer.Type.Integer, [GHC.Integer.Type.Integer] #)
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0] -}
d4a4f48d79b72f497b865a54ef59b316
  binomialTest ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer -> GHC.Types.Double
  {- Arity: 2, Strictness: <S,U><S,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Integer.Type.Integer w1 :: GHC.Integer.Type.Integer ->
                 case GramLab.Binomial.$wbinomialTest w w1 of ww { DEFAULT ->
                 GHC.Types.D# ww }) -}
411c11b6be2d2e896070f573f2caaa21
  binomialTest1 :: GHC.Types.Double
  {- Strictness: b -}
27bb30469eb767203173a5601dc3b885
  binomialTest2 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 0.5) -}
a6b0bdc4b8a6f0467e6c986319820cd5
  binomialTest3 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 2) -}
e9bfdb6612b7ee183ae5d0d18cf0d318
  binomialTest_$s$wpowers1' ::
    GHC.Types.Double
    -> [GHC.Types.Double]
    -> GHC.Types.Double
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> (# GHC.Types.Double, [GHC.Types.Double] #)
  {- Arity: 5, Strictness: <L,U><L,U><L,U(U)><S,U><S,U> -}
47f13069bfa5290b9164ffb8eb5384df
  binomialTest_powers2 ::
    GHC.Types.Double
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> [GHC.Types.Double]
  {- Arity: 3, Strictness: <L,U(U)><S,U><S,U>m2, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Double
                   w1 :: GHC.Integer.Type.Integer
                   w2 :: GHC.Integer.Type.Integer ->
                 case GramLab.Binomial.$wpowers2 w w1 w2 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Types.Double ww1 ww2 }) -}
52d3a22e64e51add38f010fd4c2f09b7
  binomialTest_products1 ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer -> [GHC.Integer.Type.Integer]
  {- Arity: 2, Strictness: <S,U><S,U>m2, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Integer.Type.Integer w1 :: GHC.Integer.Type.Integer ->
                 case GramLab.Binomial.$wproducts1 w w1 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Integer.Type.Integer ww1 ww2 }) -}
82e946fd02bf6fc4b9abf8685c9db179
  binomialTest_products2 ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer -> [GHC.Integer.Type.Integer]
  {- Arity: 2, Strictness: <S,U><S,U>m2, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Integer.Type.Integer w1 :: GHC.Integer.Type.Integer ->
                 case GramLab.Binomial.$wproducts2 w w1 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Integer.Type.Integer ww1 ww2 }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

